ABSTRACT := 
Q.1 
abstract class shap {
  abstract void volume();

  abstract void area();
}

class Rect extends shap {

  void volume() {
    System.out.println("Hello");
  }

  void area() {
    System.out.println("area");
  }
}

public class Prectice {
  public static void main(String[] args) {
    Rect k = new Rect();
    k.area();
    k.volume();
  }
}
=================================================================
Q.2

abstract class bike {
  abstract void horn();

  abstract void headlight();

  abstract void tyres();

  abstract void engine();
}

class tvs extends bike {

  void horn() {
    System.out.println("Horn of TVS");
  }

  void headlight() {
    System.out.println("Hedlighht of TVS");
  }

  void engine() {
    System.out.println("engine of TVS");
  }

  void tyres() {
    System.out.println("tyres of TVS");
  }
}

class honda extends bike {

  void horn() {
    System.out.println("Horn of Honda");
  }

  void headlight() {
    System.out.println("Hedlighht of Honda");
  }

  void engine() {
    System.out.println("engine of Honda");
  }

  void tyres() {
    System.out.println("tyres of Honda");
  }
}

class bullet extends bike {

  void horn() {
    System.out.println("Horn of Buttet");
  }

  void headlight() {
    System.out.println("Hedlighht of Buttet");
  }

  void engine() {
    System.out.println("engine of Buttet");
  }

  void tyres() {
    System.out.println("tyres of Buttet");
  }
}

class bajaj extends bike {

  void horn() {
    System.out.println("Horn");
  }

  void headlight() {
    System.out.println("Hedlighht");
  }

  void engine() {
    System.out.println("engine");
  }

  void tyres() {
    System.out.println("tyres");
  }
}

public class Prectice {
  public static void main(String[] args) {
    tvs k = new tvs();
    k.horn();
    k.headlight();
    k.tyres();
    k.engine();

    bullet l = new bullet();
    l.horn();
    l.headlight();
    l.tyres();
    l.engine();

    bajaj j = new bajaj();
    j.horn();
    j.headlight();
    j.tyres();
    j.engine();

    honda h = new honda();
    h.horn();
    h.headlight();
    h.tyres();
    h.engine();
  }
}
======================================================================
Q.3

abstract class Smartphones {
  abstract void cemera();

  abstract void video();

  abstract void google();

  abstract void sim();

  void audio() {
    System.out.println("in this audio");
  }

  void youtube() {
    System.out.println("this is youtube");
  }

  void chrome() {
    System.out.println("this is chrome");
  }
}

class vivo extends Smartphones {

  void cemera() {
    System.out.println("this is cemera of vivo");
  }

  void video() {
    System.out.println("this is video of vivo");
  }

  void google() {
    System.out.println("this is google of vivo");
  }

  void sim() {
    System.out.println("sim of vivo");
  }
}

class samsung extends Smartphones {

  void cemera() {
    System.out.println("this is cemera of vivo");
  }

  void video() {
    System.out.println("this is video of vivo");
  }

  void google() {
    System.out.println("this is google of vivo");
  }

  void sim() {
    System.out.println("sim of vivo");
  }
}

class Apple extends Smartphones {

  void cemera() {
    System.out.println("this is cemera of Apple");
  }

  void video() {
    System.out.println("this is video of Apple");
  }

  void google() {
    System.out.println("this is google of Apple");
  }

  void sim() {
    System.out.println("sim of Apple");
  }
}

class oppo extends Smartphones {

  void cemera() {
    System.out.println("this is cemera of oppo");
  }

  void video() {
    System.out.println("this is video of oppo");
  }

  void google() {
    System.out.println("this is google of oppo");
  }

  void sim() {
    System.out.println("sim of oppo");
  }
}

class mi extends Smartphones {

  void cemera() {
    System.out.println("this is cemera of mi");
  }

  void video() {
    System.out.println("this is video of mi");
  }

  void google() {
    System.out.println("this is google of mi");
  }

  void sim() {
    System.out.println("sim of mi");
  }
}

class nokia extends Smartphones {

  void cemera() {
    System.out.println("this is cemera of Nokia");
  }

  void video() {
    System.out.println("this is video of Nokia");
  }

  void google() {
    System.out.println("this is google of Nokia");
  }

  void sim() {
    System.out.println("sim of Nokia");
  }
}

class onepluse extends Smartphones {

  void cemera() {
    System.out.println("this is cemera of Onepluse");
  }

  void video() {
    System.out.println("this is video of Onepluse");
  }

  void google() {
    System.out.println("this is google of Onepluse");
  }

  void sim() {
    System.out.println("sim of Onepluse");
  }
}

class redmi extends Smartphones {

  void cemera() {
    System.out.println("this is cemera of Redmi");
  }

  void video() {
    System.out.println("this is video of Redmi");
  }

  void google() {
    System.out.println("this is google of Redmi");
  }

  void sim() {
    System.out.println("sim of Redmi");
  }
}

public class Prectice {
  public static void main(String[] args) {
    vivo k = new vivo();
    k.video();
    k.google();
    k.sim();
    k.cemera();

    nokia l = new nokia();
    l.video();
    l.google();
    l.sim();
    l.cemera();

    mi j = new mi();
    j.video();
    j.google();
    j.sim();
    j.cemera();

    samsung h = new samsung();
    h.video();
    h.google();
    h.sim();
    h.audio();
    h.cemera();

    redmi s = new redmi();
    s.video();
    s.google();
    s.sim();
    s.cemera();

    Apple a = new Apple();
    a.video();
    a.google();
    a.sim();
    a.cemera();

    onepluse o = new onepluse();
    o.video();
    o.google();
    o.sim();
    o.cemera();

    oppo f = new oppo();
    f.video();
    f.google();
    f.sim();
    f.cemera();
  }
}
========================================================================================================
//heriarichal inheritance 
//1)question for one parent and two child class
class  A
{
void show()
{
    System.out.println("hello");
}
}
class B extends A
{
    void show1()
    {
        System.out.println("bye");
    }
}
class C extends A
{
    void show2()
    {
        System.out.println("hii");
    }
}
public class Ab
{
     public static void main(String[] args)
    {
B k=new B();
k.show1();
k.show();
C p=new C();
p.show2();
p.show();
    }
}
--------------------------------------------------------------------------------------------------
//2)question using setter getter method for heriarichal method one parent and three child class

class  A
{
int a;
void setA(int a)
{
     this.a=a;
}
int getA()
{
    return a;
}
void show()
{
    System.out.println(a);
}
}
class B extends A
{
    int b;
    void setB(int b)
    {
        this.b=b;
    }
    int getB()
    {
        return b;
    }
    void show1()
    {
        System.out.println(b);
    }
}
class C extends A
{  
    int c;
    void setC(int c)
    {
        this.c=c;
    }
    int getC()
    {
        return c;
    }
    void show2()
    {
        System.out.println(c);
    }
}
class D extends A
{
    int d;
    void setD(int d)
    {
        this.d=d;
    }
    int getD()
    {
        return d;
    }
    void show3()
    {
        System.out.println(d);
    }
}
public class Ab
{
     public static void main(String[] args)
    {
B k=new B();
k.setA(4);
k.getA();
k.show();
k.setB(5);
k.getB();
k.show1();
C p=new C();
p.setA(6);
p.getA();
p.show();
p.setC(8);
p.getC();
p.show2();
D m=new D();
m.setA(7);
m.getA();
m.show();
m.setD(6);
m.getD();
m.show3();
    }
}
-----------------------------------------------------------------------------------------------
//setter getter 1 parent and 5 child class
//heriarichal method
//constant input

class A {
    int a, b;

    void setA(int a, int b) {
        this.a = a;
        this.b = b;
    }

    int getA1() {
        return a;
    }

    int getA2() {
        return b;
    }

    void show1() {
        System.out.println(a + b);
    }
}

class B extends A {
    int c, d;

    void setB(int c, int d) {
        this.c = c;
        this.d = d;
    }

    int getB1() {
        return c;
    }

    int getB2() {
        return d;
    }

    void show2() {
        System.out.println(a + b + c + d);
    }
}

class C extends A {
    int e, f;

    void setC(int e, int f) {
        this.e = e;
        this.f = f;
    }

    int getC1() {
        return e;
    }

    int getC2() {
        return f;
    }

    void show3() {
        System.out.println(a + b + e + f);
    }
}

class D extends A {
    int g, h;

    void setD(int g, int h) {
        this.g = g;
        this.h = h;
    }

    int getD1() {
        return g;
    }

    int getD2() {
        return h;
    }

    void show4() {
        System.out.println(a + b + g + h);
    }
}

class E extends A {
    int i, j;

    void setE(int i, int j) {
        this.i = i;
        this.j = j;
    }

    int getE1() {
        return i;
    }

    int getE2() {
        return j;
    }

    void show5() {
        System.out.println(a + b + i + j);
    }
}

class F extends A {
    int k, l;

    void setF(int k, int l) {
        this.k = k;
        this.l = l;
    }

    int getF1() {
        return k;
    }

    int getF2() {
        return l;
    }

    void show6() {
        System.out.println(a + b + k + l);
    }
}

public class Ab {
    public static void main(String[] args) {
        B n = new B();
        n.setA(4, 8);
        n.getA1();
        n.getA2();
        n.show1();
        n.setB(5, 8);
        n.getB1();
        n.getB2();
        n.show2();
        C p = new C();
        p.setA(7, 9);
        p.getA1();
        p.getA2();
        p.show1();
        p.setC(8, 9);
        p.getC1();
        p.getC2();
        p.show3();
        D m = new D();
        m.setA(7, 6);
        m.getA1();
        m.getA2();
        m.show1();
        m.setD(6, 9);
        m.getD1();
        m.getD2();
        m.show4();
        E o = new E();
        o.setA(7, 5);
        o.getA1();
        o.getA2();
        o.show1();
        o.setE(5, 8);
        o.getE1();
        o.getE2();
        o.show5();
        F t = new F();
        t.setA(4, 6);
        t.getA1();
        t.getA2();
        t.show1();
        t.setF(7, 8);
        t.getF1();
        t.getF2();
        t.show6();
    }
}
------------------------------------------------------------------------------------------------
//setter getter 1 parent and 5 child class
//heriarichal method
// user input

import java.util.*;
class A {
    int a, b;

    void setA(int a, int b) {
        this.a = a;
        this.b = b;
    }

    int getA1() {
        return a;
    }

    int getA2() {
        return b;
    }

    void show1() {
        System.out.println(a + b);
    }
}

class B extends A {
    int c, d;

    void setB(int c, int d) {
        this.c = c;
        this.d = d;
    }

    int getB1() {
        return c;
    }

    int getB2() {
        return d;
    }

    void show2() {
        System.out.println(a + b + c + d);
    }
}

class C extends A {
    int e, f;

    void setC(int e, int f) {
        this.e = e;
        this.f = f;
    }

    int getC1() {
        return e;
    }

    int getC2() {
        return f;
    }

    void show3() {
        System.out.println(a + b + e + f);
    }
}

class D extends A {
    int g, h;

    void setD(int g, int h) {
        this.g = g;
        this.h = h;
    }

    int getD1() {
        return g;
    }

    int getD2() {
        return h;
    }

    void show4() {
        System.out.println(a + b + g + h);
    }
}

class E extends A {
    int i, j;

    void setE(int i, int j) {
        this.i = i;
        this.j = j;
    }

    int getE1() {
        return i;
    }

    int getE2() {
        return j;
    }

    void show5() {
        System.out.println(a + b + i + j);
    }
}

class F extends A {
    int k, l;

    void setF(int k, int l) {
        this.k = k;
        this.l = l;
    }

    int getF1() {
        return k;
    }

    int getF2() {
        return l;
    }

    void show6() {
        System.out.println(a + b + k + l);
    }
}

public class Ab {
     public static void main(String[] args) 
     {
    Scanner sc=new Scanner(System.in);
    System.out.println("enter the value of a:");
    int a=sc.nextInt();
    System.out.println("enter the value of b:");
    int b=sc.nextInt();
    System.out.println("enter the value of c:");
    int c=sc.nextInt();
    System.out.println("enter the value of d:");
    int d=sc.nextInt();
    System.out.println("enter the value of e:");
    int e=sc.nextInt();
    System.out.println("enter the value of f:");
    int f=sc.nextInt();
    System.out.println("enter the value of g:");
    int g=sc.nextInt();
    System.out.println("enter the value of h:");
    int h=sc.nextInt();
    System.out.println("enter the value of i:");
    int i=sc.nextInt();
    System.out.println("enter the value of j:");
    int j=sc.nextInt();
    System.out.println("enter the value of k:");
    int k=sc.nextInt();
    System.out.println("enter the value of l:");
    int l=sc.nextInt();
    
        B n = new B();
        n.setA(a,b);
        n.getA1();
        n.getA2();
        n.show1();
        n.setB(c,d);
        n.getB1();
        n.getB2();
        n.show2();
        C p = new C();
        p.setA(a,b);
        p.getA1();
        p.getA2();
        p.show1();
        p.setC(e,f);
        p.getC1();
        p.getC2();
        p.show3();
        D m = new D();
        m.setA(a,b);
        m.getA1();
        m.getA2();
        m.show1();
        m.setD(g,h);
        m.getD1();
        m.getD2();
        m.show4();
        E o = new E();
        o.setA(a,b);
        o.getA1();
        o.getA2();
        o.show1();
        o.setE(i,j);
        o.getE1();
        o.getE2();
        o.show5();
        F t = new F();
        t.setA(a,b);
        t.getA1();
        t.getA2();
        t.show1();
        t.setF(k,l);
        t.getF1();
        t.getF2();
        t.show6();
    }
}
-------------------------------------------------------------------------------------------------
